'''
Cyclical figurate numbers
Problem 61 
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.


Answer:
[1281, 8128, 2882, 8256, 5625, 2512]
28684
Completed on Fri, 9 Feb 2018, 10:58



'''


from math import sqrt

def is3Triangle(num:int):
	return -0.5 + sqrt(0.25 + 2 * num)

def is4Square(num:int):
	return sqrt(num)

def is5Pentagonal(num:int):
	return (0.5 + sqrt(0.25 + 6 * num)) / 3

def is6Hexagonal(num:int):
	return (1 + sqrt(1 + 8 * num)) / 4

def is7Heptagonal(num:int):
	return (1.5 + sqrt(2.25 + 10 * num)) / 5

def is8Octagonal(num:int):
	return (2 + sqrt(4 + 12 * num)) / 6

def getNumAttribute(num:int, funcList:list):
	res = tuple()
	funcListLen = len(funcList)	
	for i in range(funcListLen):
		func = funcList[i]
		resNum = func(num)
		if resNum == int(resNum):
			res += (i + 3, )
	return res

def severNum(num:int):
	numStr = str(num)
	headNum = int(numStr[:2])
	rearNum = int(numStr[2:])
	return (headNum, rearNum)

def getNext(numList:list, step:int, repreList:list, resList:list):
	if step == TARGET_STEP:
		resList.append(numList.copy())
		return 

	lastNum = numList[step - 1]
	rear = severNum(lastNum)[1]
	if rear < 10:
		return

	rear = headDict[rear]
	for i in rear:
		numList[step] = i
		repre = DICT[i]
		for j in repre:
			if repreList[j] == 1:
				continue
			repreList[j] = 1
			getNext(numList, step + 1, repreList, resList)
			repreList[j] = 0
	return



triangle3Test = [1, 3, 6, 10, 15]
square4Test = [1, 4, 9, 16, 25]
pentagonla5Test = [1, 5, 12, 22, 35]
hexagonal6Test = [1, 6, 15, 28, 45]
heptagonal7Test = [1, 7, 18, 34, 55]
octaonal8Test = [1, 8, 21, 40, 65]
'''
test = octaonal8Test
for i in test:
	print(is8Octagonal(i))
'''

NUM_RANGE = 4
minNum = 10 ** (NUM_RANGE - 1)
maxNum = 10 ** NUM_RANGE
DICT = dict()
headDict = dict()
funcList = [is3Triangle, is4Square, is5Pentagonal, is6Hexagonal, is7Heptagonal, is8Octagonal]
TARGET_STEP = 6

# 计算出所有的数字具有的属性
for i in range(minNum, maxNum):
	res = getNumAttribute(i, funcList)
	if len(res) <= 0:
		continue
	DICT[i] = res

# 计算头部数字对应关系
for i in range(10, 100):
	headDict[i] = tuple()
for i in DICT.keys():
	res = severNum(i)
	headDict[res[0]] += (i, )

numList = [0] * 6
repreList = [0] * 9
resList = list()

for key, value in DICT.items():
	numList[0] = key
	for i in value:
		repreList[i] = 1
		keyHead = severNum(key)[0]
		getNext(numList, 1, repreList, resList)
		repreList[i] = 0

for numList in resList:
	if not severNum(numList[0])[0] == severNum(numList[TARGET_STEP-1])[1]:
		continue
	print(numList)
	print(sum(numList))
	for j in range(TARGET_STEP):
		print(numList[j], end = '')
		print(getNumAttribute(numList[j], funcList))
	print()
